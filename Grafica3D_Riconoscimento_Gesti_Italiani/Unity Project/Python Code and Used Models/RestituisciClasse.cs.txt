using System;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using UnityEngine;
using UnityEngine.UI;
using Newtonsoft.Json;

[System.Serializable]
public class ClassificationData
{
    public string frame_id;
    public string predicted_class;
    public float confidence;
    public double timestamp;
}

public class PythonReceiver : MonoBehaviour
{
    [Header("Network Settings")]
    public int port = 12345;
    
    [Header("UI Elements")]
    public Text classificationText;
    public Text confidenceText;
    public Text frameIdText;
    public Image backgroundPanel;
    
    [Header("Display Settings")]
    public float displayDuration = 3f;
    public Color highConfidenceColor = Color.green;
    public Color lowConfidenceColor = Color.red;
    public float confidenceThreshold = 0.8f;
    
    private TcpListener tcpListener;
    private Thread tcpListenerThread;
    private bool isListening = false;
    private ClassificationData latestData;
    private bool hasNewData = false;
    
    void Start()
    {
        // Inizializza il server TCP
        StartTcpListener();
        
        // Inizializza UI
        if (classificationText != null)
            classificationText.text = "In attesa di classificazione...";
        if (confidenceText != null)
            confidenceText.text = "";
        if (frameIdText != null)
            frameIdText.text = "";
    }
    
    void Update()
    {
        // Aggiorna UI nel thread principale
        if (hasNewData && latestData != null)
        {
            UpdateUI(latestData);
            hasNewData = false;
        }
    }
    
    void StartTcpListener()
    {
        try
        {
            tcpListener = new TcpListener(IPAddress.Any, port);
            tcpListenerThread = new Thread(new ThreadStart(ListenForClients));
            tcpListenerThread.IsBackground = true;
            tcpListenerThread.Start();
            isListening = true;
            
            Debug.Log($"üéØ Server avviato sulla porta {port}");
        }
        catch (Exception e)
        {
            Debug.LogError($"‚ùå Errore avvio server: {e.Message}");
        }
    }
    
    void ListenForClients()
    {
        tcpListener.Start();
        
        while (isListening)
        {
            try
            {
                using (TcpClient client = tcpListener.AcceptTcpClient())
                {
                    Debug.Log("üîó Client Python connesso");
                    
                    using (NetworkStream stream = client.GetStream())
                    {
                        byte[] buffer = new byte[1024];
                        int bytesRead;
                        
                        while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) > 0)
                        {
                            string jsonData = Encoding.UTF8.GetString(buffer, 0, bytesRead).Trim();
                            
                            // Gestisci messaggi multipli separati da newline
                            string[] messages = jsonData.Split('\n');
                            
                            foreach (string message in messages)
                            {
                                if (!string.IsNullOrEmpty(message))
                                {
                                    ProcessMessage(message);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                if (isListening)
                    Debug.LogError($"‚ùå Errore comunicazione client: {e.Message}");
            }
        }
    }
    
    void ProcessMessage(string message)
    {
        try
        {
            // Deserializza JSON
            ClassificationData data = JsonConvert.DeserializeObject<ClassificationData>(message);
            
            if (data != null)
            {
                Debug.Log($"üì• Ricevuto: {data.predicted_class} (conf: {data.confidence:P1})");
                
                // Aggiorna dati nel thread principale
                latestData = data;
                hasNewData = true;
            }
        }
        catch (Exception e)
        {
            Debug.LogError($"‚ùå Errore parsing JSON: {e.Message}");
            Debug.LogError($"Messaggio ricevuto: {message}");
        }
    }
    
    void UpdateUI(ClassificationData data)
    {
        // Aggiorna testo classificazione
        if (classificationText != null)
        {
            // Formatta il nome della classe
            string formattedClass = data.predicted_class.Replace("_", " ");
            classificationText.text = $"Gesture: {formattedClass}";
        }
        
        // Aggiorna testo confidenza
        if (confidenceText != null)
        {
            confidenceText.text = $"Confidence: {data.confidence:P1}";
        }
        
        // Aggiorna frame ID
        if (frameIdText != null)
        {
            frameIdText.text = $"Frame: {data.frame_id}";
        }
        
        // Cambia colore in base alla confidenza
        Color panelColor = data.confidence >= confidenceThreshold ? 
                          highConfidenceColor : lowConfidenceColor;
        
        if (backgroundPanel != null)
        {
            backgroundPanel.color = new Color(panelColor.r, panelColor.g, panelColor.b, 0.3f);
        }
        
        // Cambia colore del testo
        if (classificationText != null)
        {
            classificationText.color = panelColor;
        }
        
        // Avvia coroutine per nascondere dopo un po'
        StartCoroutine(HideAfterDelay());
    }
    
    IEnumerator HideAfterDelay()
    {
        yield return new WaitForSeconds(displayDuration);
        
        // Ripristina UI
        if (classificationText != null)
            classificationText.text = "In attesa di classificazione...";
        if (confidenceText != null)
            confidenceText.text = "";
        if (frameIdText != null)
            frameIdText.text = "";
        if (backgroundPanel != null)
            backgroundPanel.color = new Color(1f, 1f, 1f, 0.1f);
    }
    
    void OnApplicationQuit()
    {
        StopTcpListener();
    }
    
    void OnDestroy()
    {
        StopTcpListener();
    }
    
    void StopTcpListener()
    {
        if (isListening)
        {
            isListening = false;
            
            if (tcpListener != null)
            {
                tcpListener.Stop();
            }
            
            if (tcpListenerThread != null)
            {
                tcpListenerThread.Abort();
            }
            
            Debug.Log("üîå Server TCP fermato");
        }
    }
}